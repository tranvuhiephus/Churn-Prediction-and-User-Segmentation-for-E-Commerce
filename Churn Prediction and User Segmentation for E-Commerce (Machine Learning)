{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tranvuhiephus/Churn-Prediction-and-User-Segmentation-for-E-Commerce/blob/main/Churn%20Prediction%20and%20User%20Segmentation%20for%20E-Commerce%20(Machine%20Learning)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Churn Prediction and User Segmentation for E-Commerce(Machine Learning)"
      ],
      "metadata": {
        "id": "jZG7Uyey7eE1"
      },
      "id": "jZG7Uyey7eE1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b4e0a9ab-f2a9-4b4f-9c7e-c474d22ce885",
      "metadata": {
        "id": "b4e0a9ab-f2a9-4b4f-9c7e-c474d22ce885",
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "38db1ab5-bed5-4467-9ae6-8da371fff6b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1Nl7fhFGKf7udkrJCGqXxEd9Z1xXm92JD\n",
            "To: /content/temp_file.xlsx\n",
            "100%|██████████| 497k/497k [00:00<00:00, 69.6MB/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   CustomerID  Churn  Tenure PreferredLoginDevice  CityTier  WarehouseToHome  \\\n",
              "0       50001      1     4.0         Mobile Phone         3              6.0   \n",
              "1       50002      1     NaN                Phone         1              8.0   \n",
              "2       50003      1     NaN                Phone         1             30.0   \n",
              "3       50004      1     0.0                Phone         3             15.0   \n",
              "4       50005      1     0.0                Phone         1             12.0   \n",
              "\n",
              "  PreferredPaymentMode  Gender  HourSpendOnApp  NumberOfDeviceRegistered  \\\n",
              "0           Debit Card  Female             3.0                         3   \n",
              "1                  UPI    Male             3.0                         4   \n",
              "2           Debit Card    Male             2.0                         4   \n",
              "3           Debit Card    Male             2.0                         4   \n",
              "4                   CC    Male             NaN                         3   \n",
              "\n",
              "     PreferedOrderCat  SatisfactionScore MaritalStatus  NumberOfAddress  \\\n",
              "0  Laptop & Accessory                  2        Single                9   \n",
              "1              Mobile                  3        Single                7   \n",
              "2              Mobile                  3        Single                6   \n",
              "3  Laptop & Accessory                  5        Single                8   \n",
              "4              Mobile                  5        Single                3   \n",
              "\n",
              "   Complain  OrderAmountHikeFromlastYear  CouponUsed  OrderCount  \\\n",
              "0         1                         11.0         1.0         1.0   \n",
              "1         1                         15.0         0.0         1.0   \n",
              "2         1                         14.0         0.0         1.0   \n",
              "3         0                         23.0         0.0         1.0   \n",
              "4         0                         11.0         1.0         1.0   \n",
              "\n",
              "   DaySinceLastOrder  CashbackAmount  \n",
              "0                5.0          159.93  \n",
              "1                0.0          120.90  \n",
              "2                3.0          120.28  \n",
              "3                3.0          134.07  \n",
              "4                3.0          129.60  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3986d8c-eab6-4753-8623-39688cb853aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Churn</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>PreferredLoginDevice</th>\n",
              "      <th>CityTier</th>\n",
              "      <th>WarehouseToHome</th>\n",
              "      <th>PreferredPaymentMode</th>\n",
              "      <th>Gender</th>\n",
              "      <th>HourSpendOnApp</th>\n",
              "      <th>NumberOfDeviceRegistered</th>\n",
              "      <th>PreferedOrderCat</th>\n",
              "      <th>SatisfactionScore</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>NumberOfAddress</th>\n",
              "      <th>Complain</th>\n",
              "      <th>OrderAmountHikeFromlastYear</th>\n",
              "      <th>CouponUsed</th>\n",
              "      <th>OrderCount</th>\n",
              "      <th>DaySinceLastOrder</th>\n",
              "      <th>CashbackAmount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50001</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Debit Card</td>\n",
              "      <td>Female</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>Laptop &amp; Accessory</td>\n",
              "      <td>2</td>\n",
              "      <td>Single</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>159.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50002</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Phone</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>UPI</td>\n",
              "      <td>Male</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>120.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>50003</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Phone</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>Debit Card</td>\n",
              "      <td>Male</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>120.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50004</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Phone</td>\n",
              "      <td>3</td>\n",
              "      <td>15.0</td>\n",
              "      <td>Debit Card</td>\n",
              "      <td>Male</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4</td>\n",
              "      <td>Laptop &amp; Accessory</td>\n",
              "      <td>5</td>\n",
              "      <td>Single</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>134.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>50005</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Phone</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>CC</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>5</td>\n",
              "      <td>Single</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>129.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3986d8c-eab6-4753-8623-39688cb853aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f3986d8c-eab6-4753-8623-39688cb853aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f3986d8c-eab6-4753-8623-39688cb853aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-52576e51-fce4-4e37-86ee-e602d38836cb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52576e51-fce4-4e37-86ee-e602d38836cb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-52576e51-fce4-4e37-86ee-e602d38836cb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 50001,\n        \"max\": 50005,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          50002,\n          50005,\n          50003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3094010767585034,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredLoginDevice\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Phone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WarehouseToHome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.497368056467012,\n        \"min\": 6.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPaymentMode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Debit Card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HourSpendOnApp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5773502691896257,\n        \"min\": 2.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfDeviceRegistered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferedOrderCat\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Mobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfAddress\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Complain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OrderAmountHikeFromlastYear\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.919349550499538,\n        \"min\": 11.0,\n        \"max\": 23.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CouponUsed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051662,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OrderCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DaySinceLastOrder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.788854381999832,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CashbackAmount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.171955045695622,\n        \"min\": 120.28,\n        \"max\": 159.93,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          120.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "#import data\n",
        "\n",
        "\n",
        "import gdown\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython.display import display\n",
        "\n",
        "file_id = '1Nl7fhFGKf7udkrJCGqXxEd9Z1xXm92JD'\n",
        "output = 'temp_file.xlsx'\n",
        "\n",
        "gdown.download(f'https://drive.google.com/uc?id={file_id}', output, quiet=False)\n",
        "df = pd.read_excel(output)\n",
        "\n",
        "display(df.head(5))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b09caa82-396b-4feb-aaee-a68d02e50ed5",
      "metadata": {
        "id": "b09caa82-396b-4feb-aaee-a68d02e50ed5"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "import numpy as np\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "from sklearn.preprocessing import MinMaxScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "647bca52-ea1b-4973-bc5b-b16939110da8",
      "metadata": {
        "id": "647bca52-ea1b-4973-bc5b-b16939110da8",
        "outputId": "2ecb6a30-7f5e-4fb8-eed9-766528ad887b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerID  Churn  Tenure PreferredLoginDevice  CityTier  WarehouseToHome  \\\n",
              "0       50001      1     4.0         Mobile Phone         3              6.0   \n",
              "\n",
              "  PreferredPaymentMode  Gender  HourSpendOnApp  NumberOfDeviceRegistered  \\\n",
              "0           Debit Card  Female             3.0                         3   \n",
              "\n",
              "     PreferedOrderCat  SatisfactionScore MaritalStatus  NumberOfAddress  \\\n",
              "0  Laptop & Accessory                  2        Single                9   \n",
              "\n",
              "   Complain  OrderAmountHikeFromlastYear  CouponUsed  OrderCount  \\\n",
              "0         1                         11.0         1.0         1.0   \n",
              "\n",
              "   DaySinceLastOrder  CashbackAmount  \n",
              "0                5.0          159.93  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-54754592-fd38-455d-8348-e471e209f77e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Churn</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>PreferredLoginDevice</th>\n",
              "      <th>CityTier</th>\n",
              "      <th>WarehouseToHome</th>\n",
              "      <th>PreferredPaymentMode</th>\n",
              "      <th>Gender</th>\n",
              "      <th>HourSpendOnApp</th>\n",
              "      <th>NumberOfDeviceRegistered</th>\n",
              "      <th>PreferedOrderCat</th>\n",
              "      <th>SatisfactionScore</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>NumberOfAddress</th>\n",
              "      <th>Complain</th>\n",
              "      <th>OrderAmountHikeFromlastYear</th>\n",
              "      <th>CouponUsed</th>\n",
              "      <th>OrderCount</th>\n",
              "      <th>DaySinceLastOrder</th>\n",
              "      <th>CashbackAmount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50001</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Debit Card</td>\n",
              "      <td>Female</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>Laptop &amp; Accessory</td>\n",
              "      <td>2</td>\n",
              "      <td>Single</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>159.93</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54754592-fd38-455d-8348-e471e209f77e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-54754592-fd38-455d-8348-e471e209f77e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-54754592-fd38-455d-8348-e471e209f77e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5630,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1625,\n        \"min\": 50001,\n        \"max\": 55630,\n        \"num_unique_values\": 5630,\n        \"samples\": [\n          54332,\n          51989,\n          53444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.557240984165002,\n        \"min\": 0.0,\n        \"max\": 61.0,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          61.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredLoginDevice\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Mobile Phone\",\n          \"Phone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CityTier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WarehouseToHome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.53147518676263,\n        \"min\": 5.0,\n        \"max\": 127.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          14.0,\n          23.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferredPaymentMode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Debit Card\",\n          \"UPI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HourSpendOnApp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7219258499760615,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfDeviceRegistered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreferedOrderCat\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Laptop & Accessory\",\n          \"Mobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SatisfactionScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Single\",\n          \"Divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfAddress\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Complain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OrderAmountHikeFromlastYear\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.6754854627464644,\n        \"min\": 11.0,\n        \"max\": 26.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          11.0,\n          15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CouponUsed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8946214472186502,\n        \"min\": 0.0,\n        \"max\": 16.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OrderCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9396795481512608,\n        \"min\": 1.0,\n        \"max\": 16.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          1.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DaySinceLastOrder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.6544331967013357,\n        \"min\": 0.0,\n        \"max\": 46.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          5.0,\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CashbackAmount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.20703617486409,\n        \"min\": 0.0,\n        \"max\": 324.99,\n        \"num_unique_values\": 2586,\n        \"samples\": [\n          125.19,\n          137.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.head(1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3645f6d6-3856-4834-b485-7deb313f2a24",
      "metadata": {
        "id": "3645f6d6-3856-4834-b485-7deb313f2a24",
        "tags": []
      },
      "source": [
        "### **1. Data Preprocessing:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "defe83c5-f639-4b3a-86f8-30026eb17f0a",
      "metadata": {
        "id": "defe83c5-f639-4b3a-86f8-30026eb17f0a"
      },
      "outputs": [],
      "source": [
        "# Change all column names to lowercase for easy to mention:\n",
        "df.columns = df.columns.str.lower()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ea02acd2-65fd-48d9-995a-157a415582b2",
      "metadata": {
        "id": "ea02acd2-65fd-48d9-995a-157a415582b2",
        "outputId": "9101936b-590d-474b-9265-23c6692eaa13",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   churn  customerid         %\n",
              "0      0        4682  0.831616\n",
              "1      1         948  0.168384"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df7f3373-f6cb-4aa0-ae43-b695588b6ac0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>churn</th>\n",
              "      <th>customerid</th>\n",
              "      <th>%</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>4682</td>\n",
              "      <td>0.831616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>948</td>\n",
              "      <td>0.168384</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df7f3373-f6cb-4aa0-ae43-b695588b6ac0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-df7f3373-f6cb-4aa0-ae43-b695588b6ac0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-df7f3373-f6cb-4aa0-ae43-b695588b6ac0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-83bb8ea2-299e-418c-9f11-7866f2e0483c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-83bb8ea2-299e-418c-9f11-7866f2e0483c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-83bb8ea2-299e-418c-9f11-7866f2e0483c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_503ccfd9-108c-4fcd-8a3c-5536a1cda6e3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('imb_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_503ccfd9-108c-4fcd-8a3c-5536a1cda6e3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('imb_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "imb_df",
              "summary": "{\n  \"name\": \"imb_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"churn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2640,\n        \"min\": 948,\n        \"max\": 4682,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          948,\n          4682\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.46897632698944375,\n        \"min\": 0.16838365896980462,\n        \"max\": 0.8316163410301953,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.16838365896980462,\n          0.8316163410301953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Check imbalance data:\n",
        "imb_df = df.groupby('churn')['customerid'].count().reset_index()\n",
        "imb_df['%'] = imb_df['customerid']/sum(imb_df['customerid'])\n",
        "imb_df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "000d5140-7635-4419-b549-77edec68cf5e",
      "metadata": {
        "id": "000d5140-7635-4419-b549-77edec68cf5e"
      },
      "source": [
        "&rarr; Data is not much imbalanced &rarr; Acceptable"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d70262d4-78e4-4b76-8b7b-52e0304698a4",
      "metadata": {
        "id": "d70262d4-78e4-4b76-8b7b-52e0304698a4",
        "tags": []
      },
      "source": [
        "#### **1.1 Missing values:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e611381b-c4d6-4b8f-b216-bbea5e60d380",
      "metadata": {
        "id": "e611381b-c4d6-4b8f-b216-bbea5e60d380",
        "outputId": "14a39003-f545-4f4c-e36c-574a56f8b7b8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import missingno as msno\n",
        "msno.matrix(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e8383915-5b32-4811-82e1-15fbba5617cd",
      "metadata": {
        "id": "e8383915-5b32-4811-82e1-15fbba5617cd"
      },
      "source": [
        "1. We have 7 columns that have missing values. The amount of missing values is large --> Do not remove --> Replace with other value\n",
        "2. We need to check these columns are numeric or category.\n",
        "    - If numeric: replace with mean, median, or 0. If category, replace with mode.\n",
        "        - Mean: mình sẽ dùng khi cột đó ko có outlier, ko bị skew\n",
        "        - Median: mình sẽ dùng khi cột có outlier, bị skew  \n",
        "        - 0: khi cột giá trị của mình có thể tồn tại giá trị 0. Ví dụ: cột đó là cột cân nặng của user, thì ko thể nào có giá trị 0 được\n",
        "        \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "21b108ba-9a42-4330-9657-77b0bbcff06e",
      "metadata": {
        "id": "21b108ba-9a42-4330-9657-77b0bbcff06e",
        "outputId": "c3733e0f-fbd7-4337-e9d6-dd8e9b7ef808"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "tenure                         float64\n",
              "warehousetohome                float64\n",
              "hourspendonapp                 float64\n",
              "orderamounthikefromlastyear    float64\n",
              "couponused                     float64\n",
              "ordercount                     float64\n",
              "daysincelastorder              float64\n",
              "dtype: object"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Check dtypes of columns has missing values:\n",
        "list_null = df.columns[df.isnull().any()].tolist()\n",
        "df[list_null].dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1d82a4ad-7b68-484c-9844-6486e160f053",
      "metadata": {
        "id": "1d82a4ad-7b68-484c-9844-6486e160f053",
        "outputId": "f1013b92-4778-4176-d18c-1b0e0c2a1858"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Check the distribution to decide we will replace with median or 0:\n",
        "for i in list_null:\n",
        "    fig, ax = plt.subplots(figsize=(10, 5))\n",
        "    plot_df = df.groupby(i)[['customerid']].count().reset_index()\n",
        "    sns.barplot(data = plot_df,x=plot_df[i],y= plot_df['customerid'],ax=ax)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c99e22c-27a4-418f-9747-2ea91ebfc1f9",
      "metadata": {
        "id": "7c99e22c-27a4-418f-9747-2ea91ebfc1f9"
      },
      "source": [
        "After review the distribution, we will replace:\n",
        "   * The decision was made based on: the meaning of columns and the distribution\n",
        "        - tenure: median\n",
        "        - warehousetohome: median\n",
        "        - hourspendonapp: 0\n",
        "        - orderamounthikefromlastyear: median\n",
        "        - couponused: 0\n",
        "        - ordercount: median\n",
        "        - daysincelastorder: median"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bb902561-b71a-4b1c-96a2-51aeb8475202",
      "metadata": {
        "id": "bb902561-b71a-4b1c-96a2-51aeb8475202"
      },
      "outputs": [],
      "source": [
        "def replace_func(list_columns):\n",
        "    for i in list_columns:\n",
        "        if i in ['tenure','warehousetohome','orderamounthikefromlastyear','ordercount','daysincelastorder']:\n",
        "            median = df[i].median()\n",
        "            df[i].fillna(median, inplace=True)\n",
        "        else:\n",
        "            df[i].fillna(0, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1f9f65c7-5887-40d2-85c4-c7deb3f95270",
      "metadata": {
        "id": "1f9f65c7-5887-40d2-85c4-c7deb3f95270"
      },
      "outputs": [],
      "source": [
        "replace_func(list_null)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "87a2d2cd-96e2-4757-9ede-7a476c307900",
      "metadata": {
        "id": "87a2d2cd-96e2-4757-9ede-7a476c307900",
        "outputId": "816dd103-f638-4458-c50a-e1bf65c4e497"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "msno.matrix(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "53012ea3-417f-4c20-97af-2e65c5e36da0",
      "metadata": {
        "id": "53012ea3-417f-4c20-97af-2e65c5e36da0"
      },
      "source": [
        "#### **1.2 Duplicated Values:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4014c53d-6f1b-4216-bbcc-eb66702b3271",
      "metadata": {
        "id": "4014c53d-6f1b-4216-bbcc-eb66702b3271",
        "outputId": "e5b45cdd-d649-4802-fb91-3b5f3dd07200"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.duplicated().any()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "39ea94a9-cb4f-472f-a6c1-b68ca6b52e74",
      "metadata": {
        "id": "39ea94a9-cb4f-472f-a6c1-b68ca6b52e74"
      },
      "source": [
        "&rarr; Data do not have duplicated values"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a8867a9b-2063-40f8-94e2-28f90c1e65f8",
      "metadata": {
        "id": "a8867a9b-2063-40f8-94e2-28f90c1e65f8",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "#### **1.3 EDA by applying Decision Tree first:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b7ffb28a-05d6-4713-9c50-7c8c8869d5a8",
      "metadata": {
        "id": "b7ffb28a-05d6-4713-9c50-7c8c8869d5a8",
        "outputId": "f2cb63d8-a2a9-418f-82c5-a89f06a1427d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['preferredlogindevice',\n",
              " 'preferredpaymentmode',\n",
              " 'gender',\n",
              " 'preferedordercat',\n",
              " 'maritalstatus']"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Encoding:\n",
        "cate_columns = df.loc[:, df.dtypes == np.object].columns.tolist()\n",
        "cate_columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c6b69dc6-d7f7-43a6-8c0b-bfa5e82c2501",
      "metadata": {
        "id": "c6b69dc6-d7f7-43a6-8c0b-bfa5e82c2501",
        "outputId": "cfc73066-fed9-404b-e773-5fc7d5e8fb7d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerid</th>\n",
              "      <th>churn</th>\n",
              "      <th>tenure</th>\n",
              "      <th>citytier</th>\n",
              "      <th>warehousetohome</th>\n",
              "      <th>hourspendonapp</th>\n",
              "      <th>numberofdeviceregistered</th>\n",
              "      <th>satisfactionscore</th>\n",
              "      <th>numberofaddress</th>\n",
              "      <th>complain</th>\n",
              "      <th>...</th>\n",
              "      <th>preferredpaymentmode_E wallet</th>\n",
              "      <th>preferredpaymentmode_UPI</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>preferedordercat_Grocery</th>\n",
              "      <th>preferedordercat_Laptop &amp; Accessory</th>\n",
              "      <th>preferedordercat_Mobile</th>\n",
              "      <th>preferedordercat_Mobile Phone</th>\n",
              "      <th>preferedordercat_Others</th>\n",
              "      <th>maritalstatus_Married</th>\n",
              "      <th>maritalstatus_Single</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50001</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50002</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>50003</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50004</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>15.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>50005</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   customerid  churn  tenure  citytier  warehousetohome  hourspendonapp  \\\n",
              "0       50001      1     4.0         3              6.0             3.0   \n",
              "1       50002      1     9.0         1              8.0             3.0   \n",
              "2       50003      1     9.0         1             30.0             2.0   \n",
              "3       50004      1     0.0         3             15.0             2.0   \n",
              "4       50005      1     0.0         1             12.0             0.0   \n",
              "\n",
              "   numberofdeviceregistered  satisfactionscore  numberofaddress  complain  \\\n",
              "0                         3                  2                9         1   \n",
              "1                         4                  3                7         1   \n",
              "2                         4                  3                6         1   \n",
              "3                         4                  5                8         0   \n",
              "4                         3                  5                3         0   \n",
              "\n",
              "   ...  preferredpaymentmode_E wallet  preferredpaymentmode_UPI  gender_Male  \\\n",
              "0  ...                              0                         0            0   \n",
              "1  ...                              0                         1            1   \n",
              "2  ...                              0                         0            1   \n",
              "3  ...                              0                         0            1   \n",
              "4  ...                              0                         0            1   \n",
              "\n",
              "   preferedordercat_Grocery  preferedordercat_Laptop & Accessory  \\\n",
              "0                         0                                    1   \n",
              "1                         0                                    0   \n",
              "2                         0                                    0   \n",
              "3                         0                                    1   \n",
              "4                         0                                    0   \n",
              "\n",
              "   preferedordercat_Mobile  preferedordercat_Mobile Phone  \\\n",
              "0                        0                              0   \n",
              "1                        1                              0   \n",
              "2                        1                              0   \n",
              "3                        0                              0   \n",
              "4                        1                              0   \n",
              "\n",
              "   preferedordercat_Others  maritalstatus_Married  maritalstatus_Single  \n",
              "0                        0                      0                     1  \n",
              "1                        0                      0                     1  \n",
              "2                        0                      0                     1  \n",
              "3                        0                      0                     1  \n",
              "4                        0                      0                     1  \n",
              "\n",
              "[5 rows x 31 columns]"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "encoded_df = pd.get_dummies(df, columns = cate_columns,drop_first=True)\n",
        "encoded_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4bdc4d73-861a-4963-874e-9b2890ede2f4",
      "metadata": {
        "id": "4bdc4d73-861a-4963-874e-9b2890ede2f4"
      },
      "outputs": [],
      "source": [
        "#Normalization:\n",
        "scaler = MinMaxScaler()\n",
        "model=scaler.fit(encoded_df)\n",
        "scaled_data=model.transform(encoded_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "233c8aed-62d7-41d6-8251-178d67ff7e13",
      "metadata": {
        "id": "233c8aed-62d7-41d6-8251-178d67ff7e13",
        "outputId": "717aeb97-8dcb-4a6b-f321-ef60f70b5e0e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>churn</th>\n",
              "      <th>tenure</th>\n",
              "      <th>citytier</th>\n",
              "      <th>warehousetohome</th>\n",
              "      <th>hourspendonapp</th>\n",
              "      <th>numberofdeviceregistered</th>\n",
              "      <th>satisfactionscore</th>\n",
              "      <th>numberofaddress</th>\n",
              "      <th>complain</th>\n",
              "      <th>orderamounthikefromlastyear</th>\n",
              "      <th>...</th>\n",
              "      <th>preferredpaymentmode_E wallet</th>\n",
              "      <th>preferredpaymentmode_UPI</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>preferedordercat_Grocery</th>\n",
              "      <th>preferedordercat_Laptop &amp; Accessory</th>\n",
              "      <th>preferedordercat_Mobile</th>\n",
              "      <th>preferedordercat_Mobile Phone</th>\n",
              "      <th>preferedordercat_Others</th>\n",
              "      <th>maritalstatus_Married</th>\n",
              "      <th>maritalstatus_Single</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.065574</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.008197</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0.380952</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.147541</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.024590</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.285714</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.266667</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.147541</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.204918</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.238095</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.081967</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4 rows × 30 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   churn    tenure  citytier  warehousetohome  hourspendonapp  \\\n",
              "0    1.0  0.065574       1.0         0.008197             0.6   \n",
              "1    1.0  0.147541       0.0         0.024590             0.6   \n",
              "2    1.0  0.147541       0.0         0.204918             0.4   \n",
              "3    1.0  0.000000       1.0         0.081967             0.4   \n",
              "\n",
              "   numberofdeviceregistered  satisfactionscore  numberofaddress  complain  \\\n",
              "0                       0.4               0.25         0.380952       1.0   \n",
              "1                       0.6               0.50         0.285714       1.0   \n",
              "2                       0.6               0.50         0.238095       1.0   \n",
              "3                       0.6               1.00         0.333333       0.0   \n",
              "\n",
              "   orderamounthikefromlastyear  ...  preferredpaymentmode_E wallet  \\\n",
              "0                     0.000000  ...                            0.0   \n",
              "1                     0.266667  ...                            0.0   \n",
              "2                     0.200000  ...                            0.0   \n",
              "3                     0.800000  ...                            0.0   \n",
              "\n",
              "   preferredpaymentmode_UPI  gender_Male  preferedordercat_Grocery  \\\n",
              "0                       0.0          0.0                       0.0   \n",
              "1                       1.0          1.0                       0.0   \n",
              "2                       0.0          1.0                       0.0   \n",
              "3                       0.0          1.0                       0.0   \n",
              "\n",
              "   preferedordercat_Laptop & Accessory  preferedordercat_Mobile  \\\n",
              "0                                  1.0                      0.0   \n",
              "1                                  0.0                      1.0   \n",
              "2                                  0.0                      1.0   \n",
              "3                                  1.0                      0.0   \n",
              "\n",
              "   preferedordercat_Mobile Phone  preferedordercat_Others  \\\n",
              "0                            0.0                      0.0   \n",
              "1                            0.0                      0.0   \n",
              "2                            0.0                      0.0   \n",
              "3                            0.0                      0.0   \n",
              "\n",
              "   maritalstatus_Married  maritalstatus_Single  \n",
              "0                    0.0                   1.0  \n",
              "1                    0.0                   1.0  \n",
              "2                    0.0                   1.0  \n",
              "3                    0.0                   1.0  \n",
              "\n",
              "[4 rows x 30 columns]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scaled_df = pd.DataFrame(scaled_data, columns = encoded_df.columns.tolist())\n",
        "scaled_df.drop(columns = 'customerid',inplace=True)\n",
        "scaled_df.head(4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8c3bb829-4dba-4bea-bc24-bcaa41629c94",
      "metadata": {
        "id": "8c3bb829-4dba-4bea-bc24-bcaa41629c94"
      },
      "outputs": [],
      "source": [
        "#Applying Decision Tree (without splitting train/test):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "36af4940-0266-477f-8adf-8b12f3532c86",
      "metadata": {
        "id": "36af4940-0266-477f-8adf-8b12f3532c86"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x=scaled_df.drop('churn', axis = 1)\n",
        "y=scaled_df[['churn']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c999699-888f-4069-9919-e42d67cd20eb",
      "metadata": {
        "id": "9c999699-888f-4069-9919-e42d67cd20eb",
        "outputId": "1ee8ede2-0066-4fca-c035-8e5cc1f07be3"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "DecisionTreeClassifier()"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn import tree\n",
        "\n",
        "clf_des = tree.DecisionTreeClassifier()\n",
        "clf_des.fit(x,y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "081881d4-97c0-43ab-8189-783355647059",
      "metadata": {
        "id": "081881d4-97c0-43ab-8189-783355647059"
      },
      "outputs": [],
      "source": [
        "#Show Feature Importance:\n",
        "feats = {} # a dict to hold feature_name: feature_importance\n",
        "for feature, importance in zip(x.columns, clf_des.feature_importances_):\n",
        "    feats[feature] = importance #add the name/value pair\n",
        "\n",
        "importances = pd.DataFrame.from_dict(feats, orient='index').rename(columns={0: 'Gini-importance'})\n",
        "importances = importances.sort_values(by='Gini-importance', ascending=True)\n",
        "\n",
        "importances = importances.reset_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7c7d09c3-8cdc-499e-99d8-1815f68ca8e3",
      "metadata": {
        "id": "7c7d09c3-8cdc-499e-99d8-1815f68ca8e3",
        "outputId": "82afdc22-0e86-4dea-e40a-058e829778a9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create bar chart\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.barh(importances.tail(20)['index'][:20], importances.tail(20)['Gini-importance'])\n",
        "\n",
        "plt.title('Feature Important')\n",
        "\n",
        "# Show plot\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "57657b46-3f37-4331-8842-35b9f922d766",
      "metadata": {
        "id": "57657b46-3f37-4331-8842-35b9f922d766"
      },
      "source": [
        "As Feature Importance show, we can see these features can have high relation with target columns:\n",
        "* Tenure\n",
        "* Distance from warehouse to home\n",
        "* Cashback amount\n",
        "* Days since Last order\n",
        "* Number of Address\n",
        "* Complain\n",
        "* Order Amount Hike from last year\n",
        "\n",
        "&rarr; We will analyse and visualize these features for more insights.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f52c5ea6-6c2c-43f8-94d2-67815de84065",
      "metadata": {
        "id": "f52c5ea6-6c2c-43f8-94d2-67815de84065"
      },
      "source": [
        "#### **1.4 Analyse features from Decision Tree:**\n",
        "\n",
        "\n",
        "* Tenure\n",
        "* Distance from warehouse to home\n",
        "* Cashback amount\n",
        "* Days since Last order\n",
        "* Number of Address\n",
        "* Complain\n",
        "* Order Amount Hike from last year"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "13f633c6-cc44-4980-a615-d1d6411fc170",
      "metadata": {
        "id": "13f633c6-cc44-4980-a615-d1d6411fc170"
      },
      "outputs": [],
      "source": [
        "def count_percentage(df, column, target, count):\n",
        "    '''\n",
        "    This function to create the table calculate the percentage of fraud/non-fraud\n",
        "    transaction on total transaction group by category values\n",
        "    '''\n",
        "\n",
        "    # Create 2 dataframes of fraud and non-fraud\n",
        "    fraud = df[df[target]==1].groupby(column)[[count]].count().reset_index().sort_values(ascending=False, by = count)\n",
        "    not_fraud = df[df[target]==0].groupby(column)[[count]].count().reset_index().sort_values(ascending=False, by = count)\n",
        "\n",
        "    #Merge 2 dataframe into one:\n",
        "    cate_df = fraud.merge(not_fraud, on = column , how = 'outer')\n",
        "    cate_df = cate_df.fillna(0)\n",
        "    cate_df.rename(columns = {count+'_x':'fraud',count+'_y':'not_fraud'}, inplace = True)\n",
        "\n",
        "    #Caculate the percentage:\n",
        "    cate_df['%'] = cate_df['fraud']/(cate_df['fraud']+cate_df['not_fraud'])\n",
        "    cate_df = cate_df.sort_values(by='%', ascending=False)\n",
        "\n",
        "    return cate_df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fdf73392-9572-44d5-8b3b-e0eda7e14b7a",
      "metadata": {
        "id": "fdf73392-9572-44d5-8b3b-e0eda7e14b7a",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.1 Tenure**  New users are churned more than old users (tenure = 0 or 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "42a93ad0-72ca-4802-bebf-eb70e99762e9",
      "metadata": {
        "id": "42a93ad0-72ca-4802-bebf-eb70e99762e9",
        "outputId": "9b69cc32-7239-46e0-c70e-b824be67c3a2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='tenure', ylabel='%'>"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1008x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_df = count_percentage(df, 'tenure', 'churn', 'customerid')\n",
        "#Visualize the data:\n",
        "fig, ax = plt.subplots(figsize=(14, 5))\n",
        "sns.barplot(data=plot_df, x='tenure',y='%', ax=ax)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "736d97cf-08bb-4ac5-9d25-8298522aac50",
      "metadata": {
        "id": "736d97cf-08bb-4ac5-9d25-8298522aac50",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.1 Warehouse to home**  Not significantly related"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9e3350d6-2ad4-4421-9cf6-ef4d4b793424",
      "metadata": {
        "id": "9e3350d6-2ad4-4421-9cf6-ef4d4b793424",
        "outputId": "5ba108cf-230f-41bc-eae6-6752df68a8cb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='churn', ylabel='warehousetohome'>"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "sns.boxplot(data=df, x='churn',y='warehousetohome',ax=ax)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d7f7e379-09a4-46af-991b-cd02e514e3d6",
      "metadata": {
        "id": "d7f7e379-09a4-46af-991b-cd02e514e3d6",
        "outputId": "3a6faea8-b225-4d2f-f2a3-bd1cc9bbfa41"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='churn', ylabel='warehousetohome'>"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.boxplot(data=df, x='churn',y='warehousetohome', showfliers = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d3c5cbbf-a4e8-4c7e-b8f2-0fb5aec39516",
      "metadata": {
        "id": "d3c5cbbf-a4e8-4c7e-b8f2-0fb5aec39516",
        "outputId": "d24860f5-855f-4209-bf3f-a480ecf50eaf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "count    948.000000\n",
              "mean      16.856540\n",
              "std        8.287501\n",
              "min        5.000000\n",
              "25%       10.000000\n",
              "50%       14.000000\n",
              "75%       22.000000\n",
              "max       36.000000\n",
              "Name: warehousetohome, dtype: float64"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[df['churn']==1]['warehousetohome'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aaa83b30-edc7-44e1-ab59-d656900d2cf0",
      "metadata": {
        "id": "aaa83b30-edc7-44e1-ab59-d656900d2cf0",
        "outputId": "5fe19c34-a806-4730-c022-182e35b3d31a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "count    4682.000000\n",
              "mean       15.305639\n",
              "std         8.334361\n",
              "min         5.000000\n",
              "25%         9.000000\n",
              "50%        14.000000\n",
              "75%        19.000000\n",
              "max       127.000000\n",
              "Name: warehousetohome, dtype: float64"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[df['churn']==0]['warehousetohome'].describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "80707709-734d-4da5-9264-778cc7422760",
      "metadata": {
        "id": "80707709-734d-4da5-9264-778cc7422760"
      },
      "source": [
        "For both churn & not churn:\n",
        "* The median, pt25, mean, pt75 is quite the same --> The centralize of data is the same\n",
        "* For not churn, data has some outliers --> This can be not significant enough to consider it as an insight for not churn\n",
        "\n",
        "&rarr; There're no strong evidences show that there different between churn and not churn for warehousetohome --> We will exclude this features when apply model for not being bias."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8dc79c33-67c9-430d-916e-6b874b30ce94",
      "metadata": {
        "id": "8dc79c33-67c9-430d-916e-6b874b30ce94",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.2 Cashback amount**  Churn users recevied cashback amount less than not churn users."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6d7445d5-2722-43b7-9fd5-b38c190e749f",
      "metadata": {
        "id": "6d7445d5-2722-43b7-9fd5-b38c190e749f",
        "outputId": "313dbd45-466a-4d01-c5e4-b9eb9a3316f1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='churn', ylabel='cashbackamount'>"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "sns.boxplot(data=df, x='churn',y='cashbackamount',ax=ax, showfliers = False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a4fc99f1-bb45-462a-895c-90be9a0b994c",
      "metadata": {
        "id": "a4fc99f1-bb45-462a-895c-90be9a0b994c"
      },
      "source": [
        "Churn users recevied cashback amount less than not churn users.\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a39b650-c020-4c63-9298-ff892b8e3327",
      "metadata": {
        "id": "4a39b650-c020-4c63-9298-ff892b8e3327",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.3 Days since last order:** churn users with complain = 1 have higher days since orders than churned users with complain = 0  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eb73d2eb-5ee6-4acb-8adf-cc4c9ba801fa",
      "metadata": {
        "id": "eb73d2eb-5ee6-4acb-8adf-cc4c9ba801fa",
        "outputId": "8add75df-9bb9-4441-b854-4d0de28d952b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='churn', ylabel='daysincelastorder'>"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "sns.boxplot(data=df, x='churn',y='daysincelastorder',ax=ax, showfliers = False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7b5f46e3-8e40-4a5f-bb59-f4bf9ca64a43",
      "metadata": {
        "id": "7b5f46e3-8e40-4a5f-bb59-f4bf9ca64a43"
      },
      "source": [
        "From this chart, we see for churned users, they had orders recently (the day since last order less than not churned users) --> This quite strange, we should monitor more features for this insight (satisfaction_score, complain,..)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "33c66307-5760-43b8-a0cc-2251d6e98c2e",
      "metadata": {
        "id": "33c66307-5760-43b8-a0cc-2251d6e98c2e",
        "outputId": "3943ee10-9de0-474a-d449-492d0805c2a4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='complain', ylabel='daysincelastorder'>"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "churn_df = df[df['churn']==1]\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "sns.boxplot(data=churn_df, x='complain',y='daysincelastorder',ax=ax, showfliers = False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bbd64b33-086c-452d-ae8f-bd6086538bd6",
      "metadata": {
        "id": "bbd64b33-086c-452d-ae8f-bd6086538bd6"
      },
      "source": [
        "For churned users with complain = 1, they had daysincelastorder higher than churn users with compain = 0"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "41499965-b054-40a7-a913-5d2a91bf89f4",
      "metadata": {
        "id": "41499965-b054-40a7-a913-5d2a91bf89f4",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.4 Complain** The number of users complain on churn is higher than not churn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "80a955ca-b8ae-4a96-8da6-b8a83be6ab61",
      "metadata": {
        "id": "80a955ca-b8ae-4a96-8da6-b8a83be6ab61",
        "outputId": "e6dd36a1-c6d9-4ca3-d46b-ba2a7c8135ef"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='complain', ylabel='%'>"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0YAAAE9CAYAAAAvXnIzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAATj0lEQVR4nO3dcaie53nf8d9VCdHMTckWK02xrNp0YkFp45JpakoCwWHJpDIqh5VVbohLmiAMM1lWUmYYuFu7/lHaMcjqRGhBhHRLvTHioWxqnJCOms7JkNS5tpVG3UH1poOaWU7ShKxbHNXX/jiv4O3xkXSOfR69ku7PB8R5n+e57/dc9j/y18/znlPdHQAAgJF9z6IHAAAAWDRhBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMb+uiB9hMt956a99xxx2LHgMAALhOnTp16vnu3r76/E0VRnfccUdOnjy56DEAAIDrVFX9z7XOe5QOAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4W1d9AAAMKL/9cs/uugRACaz86GnFz3ChrljBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMTxgBAADDE0YAAMDwhBEAADA8YQQAAAxv0jCqqn1VdaaqlqrqwTWuH6iqp6rqyao6WVVvW+9eAACAzTJZGFXVliQPJ9mfZHeSe6tq96plX0hyV3f/WJKfT/LxDewFAADYFFPeMdqbZKm7z3b3C0keSXJgfkF3f7u7e3Z4S5Je714AAIDNMmUY3Zbk3Nzx8uzcX1JV766qryT5z1m5a7TuvQAAAJthyjCqNc71S050P9rdb0hyT5Jf2cjeJKmqQ7PPJ528cOHCy50VAAAY2JRhtJzk9rnjHUnOX25xdz+e5Ier6taN7O3uI929p7v3bN++/ZVPDQAADGfKMDqRZFdV3VlV25IcTHJsfkFV/fWqqtnrNyfZluRr69kLAACwWbZO9cbdfbGqHkjyWJItSY529+mqun92/XCSv5fkvqr6bpL/m+RnZj+MYc29U80KAACMbbIwSpLuPp7k+Kpzh+de/1qSX1vvXgAAgClM+gteAQAAbgTCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhTRpGVbWvqs5U1VJVPbjG9fdU1VOzP09U1V1z156tqqer6smqOjnlnAAAwNi2TvXGVbUlycNJ3plkOcmJqjrW3V+eW/YnSd7e3d+oqv1JjiT58bnrd3f381PNCAAAkEx7x2hvkqXuPtvdLyR5JMmB+QXd/UR3f2N2+KUkOyacBwAAYE1ThtFtSc7NHS/Pzl3O+5P8ztxxJ/lcVZ2qqkOX21RVh6rqZFWdvHDhwisaGAAAGNNkj9IlqTXO9ZoLq+7OShi9be70W7v7fFW9Lsnnq+or3f34S96w+0hWHsHLnj171nx/AACAK5nyjtFyktvnjnckOb96UVW9KcnHkxzo7q9dOt/d52dfn0vyaFYezQMAANh0U4bRiSS7qurOqtqW5GCSY/MLqmpnkk8neW93//Hc+Vuq6tWXXid5V5JnJpwVAAAY2GSP0nX3xap6IMljSbYkOdrdp6vq/tn1w0keSvLaJB+tqiS52N17kvxAkkdn57Ym+VR3f3aqWQEAgLFN+RmjdPfxJMdXnTs89/oDST6wxr6zSe5afR4AAGAKk/6CVwAAgBuBMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeJOGUVXtq6ozVbVUVQ+ucf09VfXU7M8TVXXXevcCAABslsnCqKq2JHk4yf4ku5PcW1W7Vy37kyRv7+43JfmVJEc2sBcAAGBTTHnHaG+Spe4+290vJHkkyYH5Bd39RHd/Y3b4pSQ71rsXAABgs0wZRrclOTd3vDw7dznvT/I7G91bVYeq6mRVnbxw4cIrGBcAABjVlGFUa5zrNRdW3Z2VMPrHG93b3Ue6e09379m+ffvLGhQAABjb1gnfeznJ7XPHO5KcX72oqt6U5ONJ9nf31zayFwAAYDNMecfoRJJdVXVnVW1LcjDJsfkFVbUzyaeTvLe7/3gjewEAADbLZHeMuvtiVT2Q5LEkW5Ic7e7TVXX/7PrhJA8leW2Sj1ZVklycPRa35t6pZgUAAMY25aN06e7jSY6vOnd47vUHknxgvXsBAACmMOkveAUAALgRCCMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGN6Gwqiq3lJVv1tV/7Wq7ploJgAAgGtq65UuVtXru/urc6d+IclPJakkTyT5j9ONBgAAcG1cMYySHK6qU0l+vbv/X5I/S/KzSV5M8q2JZwMAALgmrvgoXXffk+TJJP+pqt6b5ENZiaK/kuSeaUcDAAC4Nq76GaPu/kySv5PkNUk+neRMd3+kuy9MPBsAAMA1ccUwqqqfqqrfT/K7SZ5JcjDJu6vqt6vqh6/FgAAAAFO72meM/nmSn0jyqiTHu3tvkl+oql1JfjUroQQAAHBDu1oYfTMr8fOqJM9dOtnd/yOiCAAAuElc7TNG787KD1q4mJWfRgcAAHDTueIdo+5+Psm/ukazAAAALMRVfyodAADAzU4YAQAAw5s0jKpqX1WdqaqlqnpwjetvqKovVtV3qurDq649W1VPV9WTVXVyyjkBAICxXe2n0r1sVbUlycNJ3plkOcmJqjrW3V+eW/b1JB9Mcs9l3ubu2eecAAAAJjPlHaO9SZa6+2x3v5DkkSQH5hd093PdfSLJdyecAwAA4IqmDKPbkpybO16enVuvTvK5qjpVVYc2dTIAAIA5kz1Kl6TWONcb2P/W7j5fVa9L8vmq+kp3P/6Sb7ISTYeSZOfOnS9vUgAAYGhT3jFaTnL73PGOJOfXu7m7z8++Ppfk0aw8mrfWuiPdvae792zfvv0VjAsAAIxqyjA6kWRXVd1ZVduSHExybD0bq+qWqnr1pddJ3pXkmckmBQAAhjbZo3TdfbGqHkjyWJItSY529+mqun92/XBVvT7JySTfn+TFqvpQkt1Jbk3yaFVdmvFT3f3ZqWYFAADGNuVnjNLdx5McX3Xu8Nzrr2blEbvVvpXkrilnAwAAuGTSX/AKAABwIxBGAADA8IQRAAAwPGEEAAAMTxgBAADDE0YAAMDwhBEAADA8YQQAAAxPGAEAAMMTRgAAwPCEEQAAMDxhBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMTxgBAADDE0YAAMDwhBEAADA8YQQAAAxPGAEAAMMTRgAAwPCEEQAAMDxhBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMb+uiBxjF3/zFTy56BIBJnPr1+xY9AgC8Yu4YAQAAwxNGAADA8IQRAAAwvEnDqKr2VdWZqlqqqgfXuP6GqvpiVX2nqj68kb0AAACbZbIwqqotSR5Osj/J7iT3VtXuVcu+nuSDSX7jZewFAADYFFPeMdqbZKm7z3b3C0keSXJgfkF3P9fdJ5J8d6N7AQAANsuUYXRbknNzx8uzc1PvBQAA2JApw6jWONebvbeqDlXVyao6eeHChXUPBwAAcMmUYbSc5Pa54x1Jzm/23u4+0t17unvP9u3bX9agAADA2KYMoxNJdlXVnVW1LcnBJMeuwV4AAIAN2TrVG3f3xap6IMljSbYkOdrdp6vq/tn1w1X1+iQnk3x/kher6kNJdnf3t9baO9WsAADA2CYLoyTp7uNJjq86d3ju9Vez8pjcuvYCAABMYdJf8AoAAHAjEEYAAMDwhBEAADA8YQQAAAxPGAEAAMMTRgAAwPCEEQAAMDxhBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMTxgBAADDE0YAAMDwhBEAADA8YQQAAAxPGAEAAMMTRgAAwPCEEQAAMDxhBAAADE8YAQAAwxNGAADA8IQRAAAwPGEEAAAMTxgBAADDE0YAAMDwhBEAADA8YQQAAAxPGAEAAMMTRgAAwPCEEQAAMDxhBAAADG/SMKqqfVV1pqqWqurBNa5XVX1kdv2pqnrz3LVnq+rpqnqyqk5OOScAADC2rVO9cVVtSfJwkncmWU5yoqqOdfeX55btT7Jr9ufHk3xs9vWSu7v7+almBAAASKa9Y7Q3yVJ3n+3uF5I8kuTAqjUHknyyV3wpyWuq6gcnnAkAAOAlpgyj25Kcmztenp1b75pO8rmqOlVVhyabEgAAGN5kj9IlqTXO9QbWvLW7z1fV65J8vqq+0t2Pv+SbrETToSTZuXPnK5kXAAAY1JR3jJaT3D53vCPJ+fWu6e5LX59L8mhWHs17ie4+0t17unvP9u3bN2l0AABgJFOG0Ykku6rqzqraluRgkmOr1hxLct/sp9O9Jck3u/tPq+qWqnp1klTVLUneleSZCWcFAAAGNtmjdN19saoeSPJYki1Jjnb36aq6f3b9cJLjSX4yyVKSP0/yvtn2H0jyaFVdmvFT3f3ZqWYFAADGNuVnjNLdx7MSP/PnDs+97iT/YI19Z5PcNeVsAAAAl0z6C14BAABuBMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhieMAACA4QkjAABgeMIIAAAYnjACAACGJ4wAAIDhCSMAAGB4wggAABieMAIAAIYnjAAAgOFNGkZVta+qzlTVUlU9uMb1qqqPzK4/VVVvXu9eAACAzTJZGFXVliQPJ9mfZHeSe6tq96pl+5Psmv05lORjG9gLAACwKaa8Y7Q3yVJ3n+3uF5I8kuTAqjUHknyyV3wpyWuq6gfXuRcAAGBTTBlGtyU5N3e8PDu3njXr2QsAALAptk743rXGuV7nmvXsXXmDqkNZeQwvSb5dVWfWPSHcvG5N8vyih2AM9Rs/t+gRgKvz9wLX1i+t9Z/z140fWuvklGG0nOT2ueMdSc6vc822dexNknT3kSRHXumwcDOpqpPdvWfRcwBwffD3AlzdlI/SnUiyq6rurKptSQ4mObZqzbEk981+Ot1bknyzu/90nXsBAAA2xWR3jLr7YlU9kOSxJFuSHO3u01V1/+z64STHk/xkkqUkf57kfVfaO9WsAADA2Kp7zY/uADewqjo0e8wUAPy9AOsgjAAAgOFN+RkjAACAG4IwgptIVe2rqjNVtVRVDy56HgAWq6qOVtVzVfXMomeB650wgptEVW1J8nCS/Ul2J7m3qnYvdioAFuwTSfYtegi4EQgjuHnsTbLU3We7+4UkjyQ5sOCZAFig7n48ydcXPQfcCIQR3DxuS3Ju7nh5dg4AgKsQRnDzqDXO+bGTAADrIIzg5rGc5Pa54x1Jzi9oFgCAG4owgpvHiSS7qurOqtqW5GCSYwueCQDghiCM4CbR3ReTPJDksSR/lOTfd/fpxU4FwCJV1W8n+WKSv1FVy1X1/kXPBNer6vYRBAAAYGzuGAEAAMMTRgAAwPCEEQAAMDxhBAAADE8YAQAAwxNGAAylqj5RVT99lTW/XFV/+1rNBMDibV30AABwvenuhxY9AwDXljtGAFwXquq+qnqqqv6wqn6rqn6oqr4wO/eFqto5W/eJqvpYVf2XqjpbVW+vqqNV9UdV9Ym59/t2Vf2LqvqD2f7ta3zPh6rqRFU9U1VHqqrmvsdPz14/W1X/bPY+T1fVG67RvxIAriFhBMDCVdUbk/yTJO/o7ruS/MMkv5nkk939piT/NslH5rb81STvSPKPknwmyb9M8sYkP1pVPzZbc0uSP+juNyf5vSS/tMa3/s3u/lvd/SNJXpXk715mxOdn7/OxJB9+2f+gAFy3hBEA14N3JPkP3f18knT315P8RJJPza7/VpK3za3/THd3kqeT/O/ufrq7X0xyOskdszUvJvl3s9f/ZtX+S+6uqv9WVU/PZnjjZeb79Ozrqbn3B+Am4jNGAFwPKklfZc389e/Mvr449/rS8eX+bvtL719V35vko0n2dPe5qvqnSb73MnsvfY+/uML7A3ADc8cIgOvBF5L8/ap6bZJU1V9L8kSSg7Pr70ny+xt8z+9Jcumnz/3sGvsvRdDzVfV9c2sBGJD/6wXAwnX36ar61SS/V1V/keS/J/lgkqNV9YtJLiR53wbf9v8keWNVnUryzSQ/s+p7/llV/eusPI73bJITr+yfAoAbWa08og0AN5eq+nZ3f9+i5wDgxuBROgAAYHjuGAEAAMNzxwgAABieMAIAAIYnjAAAgOEJIwAAYHjCCAAAGJ4wAgAAhvf/AXWzfurXfqGWAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 1008x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_df = count_percentage(df, 'complain', 'churn', 'customerid')\n",
        "#Visualize the data:\n",
        "fig, ax = plt.subplots(figsize=(14, 5))\n",
        "sns.barplot(data=plot_df, x='complain',y='%', ax=ax)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4daaf339-f7bb-471c-9810-62aaf42ac4d6",
      "metadata": {
        "id": "4daaf339-f7bb-471c-9810-62aaf42ac4d6",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.5 Number of Address** There're no relationship"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2accf27e-6b97-4784-b65f-0729f5a1ef0a",
      "metadata": {
        "id": "2accf27e-6b97-4784-b65f-0729f5a1ef0a",
        "outputId": "f936b4a5-270f-4013-fa2f-b2b83f82d289"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "15"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['numberofaddress'].nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "13bf3c04-8e13-4d97-aa6d-caf582e8dea7",
      "metadata": {
        "id": "13bf3c04-8e13-4d97-aa6d-caf582e8dea7"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ad13285a-bef2-410b-a9ef-caa7c0197d51",
      "metadata": {
        "id": "ad13285a-bef2-410b-a9ef-caa7c0197d51",
        "outputId": "d8846ff1-3d4e-4d92-8ee7-7d071910b70e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='numberofaddress', ylabel='%'>"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_df = count_percentage(df, 'numberofaddress', 'churn', 'customerid')\n",
        "#Visualize the data:\n",
        "fig, ax = plt.subplots(figsize=(14, 5))\n",
        "sns.barplot(data=plot_df, x='numberofaddress',y='%', ax=ax)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9571161a-16a6-41c1-a987-b2fbdd109526",
      "metadata": {
        "id": "9571161a-16a6-41c1-a987-b2fbdd109526",
        "outputId": "5edaaba5-ee6f-494f-c8de-4671b1569d11"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerid</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>numberofaddress</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 customerid\n",
              "numberofaddress            \n",
              "1                        45\n",
              "2                       241\n",
              "3                       228\n",
              "4                        65\n",
              "5                        67\n",
              "6                        66\n",
              "7                        64\n",
              "8                        66\n",
              "9                        46\n",
              "10                       35\n",
              "11                       23\n",
              "19                        1\n",
              "20                        1"
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[df['churn']==1].groupby('numberofaddress')[['customerid']].nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b4e3733f-a428-451c-968a-fbb804d92b2f",
      "metadata": {
        "id": "b4e3733f-a428-451c-968a-fbb804d92b2f"
      },
      "source": [
        "As numberofadress = 19 and 20, we see the % of churn = 100% and the number of churned users = 1 -->This not significant to get the insight\n",
        "\n",
        "&rarr; We will exclude number of address = 19 and 20 in the data for applying model"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8e60a350-fa67-4958-8cce-ce7b4d0a2c1e",
      "metadata": {
        "id": "8e60a350-fa67-4958-8cce-ce7b4d0a2c1e",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "##### **1.4.6 Order amount hike from last year**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "512daf4c-ccab-4d93-a12b-cca65adea254",
      "metadata": {
        "id": "512daf4c-ccab-4d93-a12b-cca65adea254",
        "outputId": "e73080ab-6554-4894-94ba-c16d55ad224f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([11., 15., 14., 23., 22., 16., 12., 13., 17., 18., 24., 19., 20.,\n",
              "       21., 25., 26.])"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['orderamounthikefromlastyear'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2169998-105f-49c0-9dbf-d04b8dad3279",
      "metadata": {
        "id": "b2169998-105f-49c0-9dbf-d04b8dad3279",
        "outputId": "8bc54e85-ee87-4077-e770-346ee11d7152"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:xlabel='orderamounthikefromlastyear', ylabel='%'>"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_df = count_percentage(df, 'orderamounthikefromlastyear', 'churn', 'customerid')\n",
        "#Visualize the data:\n",
        "fig, ax = plt.subplots(figsize=(14, 5))\n",
        "sns.barplot(data=plot_df, x='orderamounthikefromlastyear',y='%', ax=ax)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d4345a13-c2f2-4016-8b69-904b0127bc11",
      "metadata": {
        "id": "d4345a13-c2f2-4016-8b69-904b0127bc11"
      },
      "source": [
        "There're no significant insight from this features"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "28bccbce-0269-49b1-afbc-c31512a7a085",
      "metadata": {
        "id": "28bccbce-0269-49b1-afbc-c31512a7a085"
      },
      "source": [
        "##### **1.4.7 Conclusion & Suggestion**"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "58e8ea38-191d-4c6a-b053-59a0fe0320b7",
      "metadata": {
        "id": "58e8ea38-191d-4c6a-b053-59a0fe0320b7"
      },
      "source": [
        "1. Churned users usually are new users &rarr; Provide more promotion for new users, or increase the new users experience\n",
        "2. Churned users usually receive less cashback than not churn &rarr; Increase the cashback ratio\n",
        "3. Churned users complain more &rarr; deep dive what these churned users complain about, and provide the solution"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3aa54539-eac2-4337-bf73-bb1abdda9d04",
      "metadata": {
        "id": "3aa54539-eac2-4337-bf73-bb1abdda9d04",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "### **2. Feature Transforming:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1bc2295e-effd-48de-8d48-0dbe4aa046bd",
      "metadata": {
        "id": "1bc2295e-effd-48de-8d48-0dbe4aa046bd",
        "outputId": "2097b4e3-b026-4c96-f327-e6ca0fa8c4ea"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerid</th>\n",
              "      <th>churn</th>\n",
              "      <th>tenure</th>\n",
              "      <th>preferredlogindevice</th>\n",
              "      <th>citytier</th>\n",
              "      <th>preferredpaymentmode</th>\n",
              "      <th>gender</th>\n",
              "      <th>hourspendonapp</th>\n",
              "      <th>numberofdeviceregistered</th>\n",
              "      <th>preferedordercat</th>\n",
              "      <th>satisfactionscore</th>\n",
              "      <th>maritalstatus</th>\n",
              "      <th>numberofaddress</th>\n",
              "      <th>complain</th>\n",
              "      <th>orderamounthikefromlastyear</th>\n",
              "      <th>couponused</th>\n",
              "      <th>ordercount</th>\n",
              "      <th>daysincelastorder</th>\n",
              "      <th>cashbackamount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50001</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>3</td>\n",
              "      <td>Debit Card</td>\n",
              "      <td>Female</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3</td>\n",
              "      <td>Laptop &amp; Accessory</td>\n",
              "      <td>2</td>\n",
              "      <td>Single</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>159.93</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   customerid  churn  tenure preferredlogindevice  citytier  \\\n",
              "0       50001      1     4.0         Mobile Phone         3   \n",
              "\n",
              "  preferredpaymentmode  gender  hourspendonapp  numberofdeviceregistered  \\\n",
              "0           Debit Card  Female             3.0                         3   \n",
              "\n",
              "     preferedordercat  satisfactionscore maritalstatus  numberofaddress  \\\n",
              "0  Laptop & Accessory                  2        Single                9   \n",
              "\n",
              "   complain  orderamounthikefromlastyear  couponused  ordercount  \\\n",
              "0         1                         11.0         1.0         1.0   \n",
              "\n",
              "   daysincelastorder  cashbackamount  \n",
              "0                5.0          159.93  "
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Remove Warehouse to home and number of address =19,20\n",
        "df_model = df.drop(columns = 'warehousetohome')\n",
        "df_model = df_model.drop(df_model[(df_model.numberofaddress == 19)|(df_model.numberofaddress == 20)].index)\n",
        "df_model.head(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ce28cc8f-ab9b-43fc-adeb-d9e63aee3a5e",
      "metadata": {
        "id": "ce28cc8f-ab9b-43fc-adeb-d9e63aee3a5e",
        "outputId": "489c7f44-f233-4fd5-fb31-93c862518875"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['preferredlogindevice',\n",
              " 'preferredpaymentmode',\n",
              " 'gender',\n",
              " 'preferedordercat',\n",
              " 'maritalstatus']"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cate_columns = df_model.loc[:, df_model.dtypes == np.object].columns.tolist()\n",
        "cate_columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a27467df-b23d-4b99-96b1-17ac4ba38883",
      "metadata": {
        "id": "a27467df-b23d-4b99-96b1-17ac4ba38883",
        "outputId": "9d583af8-6db3-4069-e28c-2f7162b3dd7c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(5628, 30)"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "encoded_df = pd.get_dummies(df_model, columns = cate_columns,drop_first=True)\n",
        "encoded_df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3d34de48-de31-4f8b-9804-a54876036c2a",
      "metadata": {
        "id": "3d34de48-de31-4f8b-9804-a54876036c2a"
      },
      "outputs": [],
      "source": [
        "#Scale Feature:\n",
        "scaler = MinMaxScaler()\n",
        "model=scaler.fit(encoded_df)\n",
        "scaled_data=model.transform(encoded_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "036fe5a9-0fa5-4d82-8b3f-a98acccdc453",
      "metadata": {
        "id": "036fe5a9-0fa5-4d82-8b3f-a98acccdc453"
      },
      "outputs": [],
      "source": [
        "scaled_df = pd.DataFrame(scaled_data, columns = encoded_df.columns.tolist())\n",
        "scaled_df.drop(columns = 'customerid',inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ea2d650e-7bf3-40bf-a08f-fcacf96ae808",
      "metadata": {
        "id": "ea2d650e-7bf3-40bf-a08f-fcacf96ae808",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "### **3. Model Training & Evaluation:**"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "00e788a8-3639-4e19-a544-0f4c24ed62c3",
      "metadata": {
        "id": "00e788a8-3639-4e19-a544-0f4c24ed62c3"
      },
      "source": [
        "#### **3.1 Split train/test set:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "58f6369e-6f35-4bf3-9f8a-2765ae1ae088",
      "metadata": {
        "id": "58f6369e-6f35-4bf3-9f8a-2765ae1ae088"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x=scaled_df.drop('churn', axis = 1)\n",
        "y=scaled_df[['churn']]\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "09c019c9-f723-4831-89b6-7f61bff6bb62",
      "metadata": {
        "id": "09c019c9-f723-4831-89b6-7f61bff6bb62"
      },
      "source": [
        "#### **3.2 Apply model: Logistic Regression**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5413318c-98f7-4c8f-a425-af790c9f740a",
      "metadata": {
        "id": "5413318c-98f7-4c8f-a425-af790c9f740a",
        "outputId": "eac1d5ee-9bb2-4794-90c1-cffcdbdaccca"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "LogisticRegression(random_state=0)"
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "clf_logis = LogisticRegression(random_state = 0)\n",
        "clf_logis.fit(x_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4a6674f5-df4a-40fb-b2ec-79816f22940c",
      "metadata": {
        "id": "4a6674f5-df4a-40fb-b2ec-79816f22940c"
      },
      "outputs": [],
      "source": [
        "y_pred_test = clf_logis.predict(x_test)\n",
        "y_pred_train = clf_logis.predict(x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ffa81236-2f12-47b6-8989-0999b239e134",
      "metadata": {
        "id": "ffa81236-2f12-47b6-8989-0999b239e134",
        "outputId": "16750417-ba94-4b52-df5e-716f410ec0b8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.7127869566576288 0.6869139242745931\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import balanced_accuracy_score\n",
        "\n",
        "balanced_accuracy_train = balanced_accuracy_score(y_train, y_pred_train)\n",
        "balanced_accuracy_test = balanced_accuracy_score(y_test, y_pred_test)\n",
        "print(balanced_accuracy_train,balanced_accuracy_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "84d262b4-1100-496a-ba34-111d8f72cb12",
      "metadata": {
        "id": "84d262b4-1100-496a-ba34-111d8f72cb12"
      },
      "source": [
        "&rarr; The balanced accuracy of Logistic Regression is 71%\n",
        "No unerfitting or overfitting"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7ad4a09a-69a8-4459-884f-978858d13660",
      "metadata": {
        "id": "7ad4a09a-69a8-4459-884f-978858d13660"
      },
      "source": [
        "#### **3.2 Apply model: Random Forest**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1b65fc0-dd88-47cc-bb7c-d9994608368a",
      "metadata": {
        "id": "c1b65fc0-dd88-47cc-bb7c-d9994608368a"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "clf_rand = RandomForestClassifier(max_depth=15, random_state=0, n_estimators = 100)\n",
        "\n",
        "clf_rand.fit(x_train, y_train)\n",
        "y_ranf_pre_train = clf_rand.predict(x_train)\n",
        "y_ranf_pre_test = clf_rand.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8f181e3b-f846-4350-a8df-cabe2abe25cf",
      "metadata": {
        "id": "8f181e3b-f846-4350-a8df-cabe2abe25cf",
        "outputId": "64dc15bf-687c-4f99-e3e7-e70ecc353f11"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Balance accuracy of train set: 0.9977203647416413\n",
            "Balance accuracy of test set: 0.8575769639065818\n"
          ]
        }
      ],
      "source": [
        "print(f'Balance accuracy of train set: {balanced_accuracy_score(y_train, y_ranf_pre_train)}')\n",
        "print(f'Balance accuracy of test set: {balanced_accuracy_score(y_test, y_ranf_pre_test)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9678eb36-51d7-4dfe-b6e9-da5ab1156df3",
      "metadata": {
        "id": "9678eb36-51d7-4dfe-b6e9-da5ab1156df3"
      },
      "source": [
        "#### **3.3 Enhanced Random Forest model**"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08a5ee45-7b47-42cd-8c51-213ee7079839",
      "metadata": {
        "id": "08a5ee45-7b47-42cd-8c51-213ee7079839"
      },
      "source": [
        "**Hyperparameter Tuning**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4485ea0b-165e-413f-9308-5be0e2d584e0",
      "metadata": {
        "id": "4485ea0b-165e-413f-9308-5be0e2d584e0",
        "outputId": "c353678f-bb98-4cc8-a5d1-2524f2843ccb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Best Parameters:  {'bootstrap': False, 'max_depth': 20, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 200}\n",
            "Test set accuracy:  0.961248654467169\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "# Define the parameter grid\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [20, 30,40],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'bootstrap': [True, False]\n",
        "}\n",
        "\n",
        "# Use GridSearchCV to find the best parameters\n",
        "grid_search = GridSearchCV(clf_rand, param_grid, cv=5, scoring='balanced_accuracy')\n",
        "\n",
        "# Fit the model\n",
        "grid_search.fit(x_train, y_train)\n",
        "/\n",
        "# Print the best parameters\n",
        "print(\"Best Parameters: \", grid_search.best_params_)\n",
        "\n",
        "# Evaluate the best model on the test set\n",
        "best_clf = grid_search.best_estimator_"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2541a94d-4d26-42eb-a1ca-307486a0f7c4",
      "metadata": {
        "id": "2541a94d-4d26-42eb-a1ca-307486a0f7c4"
      },
      "source": [
        "**Re-apply model with new parameters:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2c83ee62-ce53-4141-93c4-d63406b609e0",
      "metadata": {
        "id": "2c83ee62-ce53-4141-93c4-d63406b609e0"
      },
      "outputs": [],
      "source": [
        "best_params = grid_search.best_params_\n",
        "clf_rand_after = RandomForestClassifier(**best_params,random_state=0)\n",
        "\n",
        "clf_rand_after.fit(x_train, y_train)\n",
        "y_ranf_aft_train = clf_rand_after.predict(x_train)\n",
        "y_ranf_aft_test = clf_rand_after.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e204959c-126f-4b4c-8d3b-c9c639d23e1e",
      "metadata": {
        "id": "e204959c-126f-4b4c-8d3b-c9c639d23e1e",
        "outputId": "00971f5d-c096-4258-8a8e-ea28a7433508"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Balance accuracy of train set: 1.0\n",
            "Balance accuracy of test set: 0.9005175159235669\n"
          ]
        }
      ],
      "source": [
        "print(f'Balance accuracy of train set: {balanced_accuracy_score(y_train, y_ranf_aft_train)}')\n",
        "print(f'Balance accuracy of test set: {balanced_accuracy_score(y_test, y_ranf_aft_test)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "20092e57-c771-494c-9463-9cf0fa641482",
      "metadata": {
        "id": "20092e57-c771-494c-9463-9cf0fa641482"
      },
      "source": [
        "**&rarr; The balanced accuracy increase to 90% &rarr; Can use this model as final model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7a546da6-c332-4426-9e09-cb7de68f486b",
      "metadata": {
        "id": "7a546da6-c332-4426-9e09-cb7de68f486b"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import confusion_matrix, precision_score, recall_score, classification_report"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "049631f2-0ca8-426a-a152-034317134723",
      "metadata": {
        "id": "049631f2-0ca8-426a-a152-034317134723",
        "outputId": "eae777f1-93b7-446f-8c1d-f381ad61b3cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Recall: 0.8125\n",
            "Precision: 0.9285714285714286\n"
          ]
        }
      ],
      "source": [
        "precision = precision_score(y_test, y_ranf_aft_test, average='binary')\n",
        "recall = recall_score(y_test, y_ranf_aft_test, average='binary')\n",
        "\n",
        "print('Recall:',recall)\n",
        "print('Precision:', precision)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "210d3256-63dd-4624-817c-9ce10985e95d",
      "metadata": {
        "id": "210d3256-63dd-4624-817c-9ce10985e95d",
        "outputId": "7664c555-3f4b-4f32-e162-10d7d19db0a3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "cm = confusion_matrix(y_test, y_ranf_aft_test)\n",
        "\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b8c4489b-4d9d-434b-9922-3e685a7ed0df",
      "metadata": {
        "id": "b8c4489b-4d9d-434b-9922-3e685a7ed0df"
      },
      "source": [
        "**&rarr; Model still can not detect 20% of actual label = 1 data (recall = 81%)**\n",
        "\n",
        "**&rarr; Next action can take to improve this: Investigate the data that model cannot detect and figure out the reason behind**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fa8001f6-7a76-428f-81df-3b61515ef9f2",
      "metadata": {
        "id": "fa8001f6-7a76-428f-81df-3b61515ef9f2"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}